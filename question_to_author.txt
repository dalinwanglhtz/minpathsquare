How can you come up with faster implementation without checking every possible path? I've being studying dynamic programming as you've hinted on in previous discussions. I don't find that very helpful as it is really about breaking bigger problem into smaller one. Important to note that I did try the subproblem method of "u->x->v". But then, even though I found shortest path from u to x. It could be the 2nd shortest path from u to x that leads to shortest path from u to v overall. So in this case, I have to check "every" possible path before I can converge on the minPath. And by doing that  give me timeout no matter what. So I don't see any better way to find shortest path than every path.